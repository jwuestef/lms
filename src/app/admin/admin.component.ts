import { Component, Output, ViewChild } from '@angular/core';
import { Router } from '@angular/router';
import { AngularFireAuth } from 'angularfire2/auth';
import { AngularFireDatabase } from 'angularfire2/database';

import { EventFormComponent } from '../event-form/event-form.component';
import { NavbarComponent } from '../navbar/navbar.component';
import { ClassCalendarComponent } from '../class-calendar/class-calendar.component';
import { EventService } from '../services/event.service';
import { StudentService } from '../services/student.service';


@Component({
  selector: 'app-admin',
  templateUrl: './admin.component.html',
  styleUrls: ['./admin.component.css'],
})
export class AdminComponent {
  @ViewChild('classCalendar') calendar: ClassCalendarComponent; // access properties and methods of the calendar component
  @ViewChild('eventForm') eventForm: EventFormComponent; // access properties and methods of the eventForm component
  isEvent = true; // booleans for the tabs
  isStudent = false;

  constructor(public router: Router, public afd: AngularFireDatabase, public afa: AngularFireAuth, public es: EventService) {
    const thisSaved = this;
    // ---------------- Query for route protection ---------------
    this.afd.database.ref('/isAdmin').once('value').then(function (isAdminTable) {
      const arrayOfAdmins = isAdminTable.val(); // array of admins from the database
      const authData = thisSaved.afa.auth.currentUser.email; // pulls authentication info from the client and identifies current user;
      const atSign = authData.search('@'); // finds @ in current user
      const userToCheckIfAdmin = authData.slice(0, atSign); // strips @ and everything past that.
      const isAdmin = arrayOfAdmins.hasOwnProperty(userToCheckIfAdmin); // If our database object full of admins has a property of this username then this is true
      if (!isAdmin) {
        thisSaved.router.navigateByUrl('/student'); // reroutes if not admin
      }
    });
  }


// --------addOrEditEvents handles which verison of the form sent an action-------------
  addOrEditEvents(operation) {
    // Operation is the string that holds which action to be performed
    console.log(operation);
    if (operation === 'add') {
      this.calendar.renderEvents();
    } else if (operation === 'delete') {
      this.calendar.deleteEvents();
    } else {
      this.calendar.updateEvents();
    }
  }


  // This is called when a calendar is selected from the dropdown
  loadEvents() {
    this.es.eventArray = []; // clears events array
    console.log('loadEvents in adminComponent Called');
    console.log(this.es.currentCalender);
    const thisSaved = this;
    let counterOfEvents = 0;
    console.log(thisSaved.es.currentCalender.events);
    if (thisSaved.es.currentCalender.events !== undefined) {
      Object.keys(thisSaved.es.currentCalender.events).forEach(function (key) {
        // Iterates through events query results and turns the return object into an array of objects
        thisSaved.es.eventArray[counterOfEvents] = thisSaved.es.currentCalender.events[key];
        thisSaved.es.eventArray[counterOfEvents].id = key; // overwrites the id in each event with a key generated by the database
        counterOfEvents++;
      });
    }
    this.calendar.loadCalendar();
  }


// Tab switching
  showEventForm() {
    this.isStudent = false;
    this.isEvent = true;
  }

  showStudentForm() {
    this.isEvent = false;
    this.isStudent = true;

  }


  // Alerts the event form component that an event was clicked and sends the event data
  alertEventForm(data) {
    this.eventForm.editEvent(data);
  }



} // End of component
