import { Component, Output, EventEmitter } from '@angular/core';
import { NgModel } from '@angular/forms';
import { AngularFireDatabase } from 'angularfire2/database';
import { FlashMessagesService } from 'angular2-flash-messages';

import { EventService } from '../services/event.service';


@Component({
  selector: 'app-event-form',
  templateUrl: './event-form.component.html',
  styleUrls: ['./event-form.component.css']
})
export class EventFormComponent {
  @Output() clickSubmit = new EventEmitter<string>();
  eventName: string;
  eventDate: string;
  eventLink = '';
  eventType = 'Event Type';
  showEdit = false;
  currentForm = 'Add';
  operation = '';
  nameError = false;
  eventsListAsObject;



  // The contructor function runs automatically on component load, each and every time it's called
  constructor(private es: EventService, private afd: AngularFireDatabase, private fms: FlashMessagesService) { }



  // Handles adding or editing events
  addOrEditEvent(data) {
    const currentEvent = {
      id: '',
      title: this.eventName,
      start: this.eventDate,
      color: this.eventType,
      url: this.eventLink
    };
    // What is the current form, Add or Edit?
    if (this.currentForm === 'Add') {
      // Save currentEvent to Firebase
      const thisSaved = this;
      const dbRef = this.afd.database.ref('/calendars/' + this.es.currentCalender.title + '/events').push(currentEvent);
      // Assign id generated by Firebase to object, and push event onto local array inside the event.service
      currentEvent.id = dbRef.key;
      this.es.eventArray.push(currentEvent);
      // Emit an event to call a the renderEvents function, to render the new event on the calendar
      this.clickSubmit.emit('add');
    } else {
      // If the form is Edit
      // Set eventBeingEdited properties to the new values set by the user form
      this.es.eventBeingEdited.start._i = this.eventDate;
      this.es.eventBeingEdited.title = this.eventName;
      this.es.eventBeingEdited.url = this.eventLink;
      this.es.eventBeingEdited.color = this.eventType;
      // Emit an event to call the editEvents function to rerender that edited event
      this.clickSubmit.emit('');
      // Switch form back to add
      this.showEdit = false;
      this.currentForm = 'Add';

      // Update the datebase with using the object currentEvent
      // First, query Firebase for all events on this calendar, return object full of eventObjects
      const thisSaved = this;
      this.afd.database.ref('/calendars/' + this.es.currentCalender.title + '/events').once('value').then(function (eventsListFromDB) {
        thisSaved.eventsListAsObject = eventsListFromDB.val();
        // console.log('The returned object full of events (named "eventsListAsObject") is: ');
        // console.log(thisSaved.eventsListAsObject);
        // console.log('Now looping over object key/value pairs:');
        Object.keys(thisSaved.eventsListAsObject).forEach(function (key) {
          // console.log(key + ' <--key has value --> ' + thisSaved.eventsListAsObject[key]);
          // console.log(thisSaved.eventsListAsObject[key]);
          // console.log('This event\'s title from the DB is:');
          // console.log(thisSaved.eventsListAsObject[key]['title']);
          // console.log('This event\'s start from the DB is:');
          // console.log(thisSaved.eventsListAsObject[key]['start']);
          // When the key matches with the event update it
          if (thisSaved.es.eventBeingEdited.id === key) {
            thisSaved.afd.database.ref('/calendars/' + thisSaved.es.currentCalender.title + '/events/' + key).update({
              title: thisSaved.es.eventBeingEdited.title,
              start: thisSaved.es.eventBeingEdited.start._i,
              color: thisSaved.es.eventBeingEdited.color,
              url: thisSaved.es.eventBeingEdited.url
            }).then(function () {
              // Event was successfully edited, show pretty alert flash message
              thisSaved.fms.show(
                '\'' + thisSaved.es.eventBeingEdited.title + '\' edited in ' + '\'' + thisSaved.es.currentCalender.title + '\'',
                {
                  cssClass: 'alert-success',
                  timeout: 1500
                }
              );
            }).catch(function (err) {
              console.log('Error editing event!');
              console.log(err);
            });
          } else {
            // If the event key is not found
            console.log('Event key not found');
            console.log(thisSaved.es.eventBeingEdited.id);
            console.log(key);
          }
        });
      });
    }  // End of code block for... if(form is add) else (form must be edit)
    // Clears form fields
    this.eventDate = '';
    this.eventName = '';
    this.eventType = 'Event Type';
    this.eventLink = '';
  }



  // Populates the event-form fields with the given event
  editEvent(data) {
    this.showEdit = true;
    this.currentForm = 'Edit';
    this.es.eventBeingEdited = data;
    this.eventDate = data.start._i;
    this.eventName = data.title;
    this.eventLink = data.url;
    this.eventType = data.color;
  }



  // Called when the Delete button is pressed
  deleteEvent() {
    // Fires event to call the render event, to delete the event from the local calendar
    this.clickSubmit.emit('delete');
    // Query database for all events on this calendar, return object full of eventObjects
    const thisSaved = this;
    this.afd.database.ref('/calendars/' + this.es.currentCalender.title + '/events').once('value').then(function (eventsListFromDB) {
      thisSaved.eventsListAsObject = eventsListFromDB.val();
      // Loop over the big event object's key/value pairs
      Object.keys(thisSaved.eventsListAsObject).forEach(function (key) {
        // If the id of the event we're deleting matches the key in Firebase, this must be the event to delete!
        if (thisSaved.es.eventBeingEdited.id === key) {
          // Query db to remove the event
          thisSaved.afd.database.ref('/calendars/' + thisSaved.es.currentCalender.title + '/events/' + key).remove().then(function () {
            // Event successfully removed, show flash alert message informing user of success
            thisSaved.fms.show(
              '\'' + thisSaved.es.eventBeingEdited.title + '\' removed from ' + '\'' + thisSaved.es.currentCalender.title + '\'',
              {
                cssClass: 'alert-success',
                timeout: 1500
              }
            );
          }).catch(function (err) {
            console.log('Error deleting event!');
            console.log(err);
          });
        }
      });
    });
  }



  // Based off the action/operation occuring, determine which function to use
  setAction(action) {
    this.operation = action;
  }
  chooseAction() {
    // Form validation to begin with
    if (this.eventName === '' || this.eventName === undefined) {  // check if eventName is empty
      this.nameError = true;
    } else {
      if (this.eventDate === undefined || this.eventDate === '') {  // Check if eventData is empty
        this.nameError = true;
      } else {
        // We passed all the form validation
        if (this.operation === 'addOrEdit') {
          // Perform either Add or Edit
          this.nameError = false;
          this.addOrEditEvent(this.currentForm);
        } else {
          // Perform Delete
          this.nameError = false;
          this.deleteEvent();
        }
      }
    }
  }



  // Fires when the <- arrow is pressed, from the edit/delete view, to return to the Add Event form view
  switchToAdd() {
    this.showEdit = false;
    this.currentForm = 'Add';
    this.eventDate = '';
    this.eventName = '';
    this.eventType = 'Event Type';
    this.eventLink = '';
  }



}  // End of component
